syntax = "proto3";

package api;

option go_package = "github.com/IABTechLab/adscert/pkg/adscert/api";

// RequestInfo conveys the basic parameters required for an authenticated
// connections signing or verify operation.
message RequestInfo {
    string invoking_domain = 1;
    bytes url_hash = 2;
    bytes body_hash = 3;
    repeated SignatureInfo signature_info = 4;
}

// SignatureInfo captures the signature generated for the signing request.  It
// also provides structured metadata about the signature operation, useful in
// the integrating application for diagnostics.
message SignatureInfo {
    string signature_message = 1;
    string signing_status = 2;
    string from_domain = 3;
    string from_key = 4;
    string invoking_domain = 5;
    string to_domain = 6;
    string to_key = 7;
}

// AuthenticatedConnectionSignatureRequest contains the parameters for a signing
// request.
message AuthenticatedConnectionSignatureRequest {
    RequestInfo request_info = 1;
    string timestamp = 2;
    string nonce = 3;
}

// AuthenticatedConnectionSignatureResponse contains the results of a signing
// request, including any signature and relevant metadata. Multiple signatures
// can technically be present according to the specification.
message AuthenticatedConnectionSignatureResponse {
    SignatureStatus signature_status = 1;
    RequestInfo request_info = 2;
}

enum SignatureStatus {
    SIGNATURE_STATUS_UNDEFINED = 0;
    SIGNATURE_STATUS_OK = 1;
    SIGNATURE_STATUS_SIGNATORY_DEACTIVATED = 2;
    SIGNATURE_STATUS_SIGNATORY_INTERNAL_ERROR = 3;
    SIGNATURE_STATUS_MISSING_REQUIRED_PARAMETER = 4;
    SIGNATURE_STATUS_NO_COUNTERPARTY_INFO = 5;
}

// AuthenticatedConnectionVerificationRequest contains a request for verifying
// signatures generated by another party.
message AuthenticatedConnectionVerificationRequest {
    RequestInfo request_info = 1;
}

// AuthenticatedConnectionVerificationResponse contains the results of verifying
// signatures.
message AuthenticatedConnectionVerificationResponse {
    VerificationStatus verification_status = 1;
    bool body_valid = 2;
    bool url_valid = 3;
}

enum VerificationStatus {
    VERIFICATION_STATUS_UNDEFINED = 0;
    VERIFICATION_STATUS_OK = 1;
    VERIFICATION_STATUS_SIGNATORY_DEACTIVATED = 2;
    VERIFICATION_STATUS_SIGNATORY_INTERNAL_ERROR = 3;
    VERIFICATION_STATUS_MISSING_REQUIRED_PARAMETER = 4;
    VERIFICATION_STATUS_NO_COUNTERPARTY_INFO = 5;
}

service AdsCertSignatory {
    rpc SignAuthenticatedConnection(AuthenticatedConnectionSignatureRequest) returns (AuthenticatedConnectionSignatureResponse) {}
    rpc VerifyAuthenticatedConnection(AuthenticatedConnectionVerificationRequest) returns (AuthenticatedConnectionVerificationResponse) {}
}
