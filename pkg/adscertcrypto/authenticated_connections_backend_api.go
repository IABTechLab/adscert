package adscertcrypto

import "fmt"

// RequestInfo conveys the basic parameters required for an authenticated
// connections signing or verify operation.
type RequestInfo struct {
	InvocationHostname string
	URLHash            [32]byte
	BodyHash           [32]byte
}

// AuthenticatedConnectionSigningPackage contains the parameters for a signing
// request.
type AuthenticatedConnectionSigningPackage struct {
	Timestamp string
	Nonce     string

	RequestInfo RequestInfo
}

// AuthenticatedConnectionSignatureResponse contains the results of a signing
// request, including any signature and relevant metadata. Multiple signatures
// can technically be present according to the specification.
type AuthenticatedConnectionSignatureResponse struct {
	SignatureInfo []SignatureInfo
}

// SignatureInfo captures the signature generated for the signing request.  It
// also provides structured metadata about the signature operation, useful in
// the integrating application for diagnostics.
type SignatureInfo struct {
	SignatureMessage string

	// Status as reported by the signing system.
	SigningStatus string

	FromDomain     string
	FromKey        string
	InvokingDomain string
	ToDomain       string
	ToKey          string
}

// String provides a summary of the generated signature, including the
// originating and destination parties.  It also includes the keys used.
func (si SignatureInfo) String() string {
	// TODO: Make this formatting nicer when there's no counterparty DNS info
	// to include in the debug message.
	return fmt.Sprintf(
		"Status %s From %s:%s Invoking %s To %s:%s Header %q",
		si.SigningStatus,
		si.FromDomain,
		si.FromKey,
		si.InvokingDomain,
		si.ToDomain,
		si.ToKey,
		si.SignatureMessage)
}

// AuthenticatedConnectionVerificationPackage contains a request for verifying
// a signature generated by another party.
type AuthenticatedConnectionVerificationPackage struct {
	RequestInfo      RequestInfo
	SignatureMessage string
}

// AuthenticatedConnectionVerificationResponse contains the results of verifying
// a signature.
type AuthenticatedConnectionVerificationResponse struct {
	BodyValid bool
	URLValid  bool

	// Curtis notes:
	// See the comments on AuthenticatedConnectionVerification for requirements about what this
	// API needs to return.
}
